        program diff_dual_freq_delays

c       Reads low band and high band multiband delay data (generated by PRTAB),
c       forms the dispersive delay (low band minus high band) for each station
c       and time, and writes out dispersive delay in the same format.

c       Note that this program started with S-/X-band data and some internal 
c       variable names retain this heritage.  Here, X => high-band  and
c       S => low-band 

c       V5a: changed to free format reading of delay-rate files
c       V5: Changed diff_across_Cband_delay to allow for different high-band, low-band,
c            and target frequencies

c       V4: (skipped V2 and 3; used V4 to matchfit_geoblocks_ionos_v4.f version)
c           changed internal variable name from "disp_delay_6.7GHz" to "disp_delay_6GHz"
c           as latest g77 compiler complained of "."
c           Put in more accurate low- and high-Cband frequencies (4.34 and 7.34 GHz)

c	Input files:
c           "diff_files.inp provides 2 file names:
c                  first,  low C-band delay/rate data
c                  second, high C-band delay/rate data
c            THE ORDER IS IMPORTANT !
c            The next three lines give the frequencies for the lower, higher, and target band.
c            Since only frequency ratios are used, the units are irrelevant

c       Output files:
c           Dispersive delay (low band minus high band values) 
c              scaled to target frequency                                     
c              File name: first_9_chars of high C-band file + "ionos.dat"
c           Tropospheric delay (high C-band values corrected by
c              removing dispersive term) 
c              File name:  first_9_chars of high C-band file + "tropos.dat"

	implicit real*8 ( a-h, o-z )


     	real*8	 Stime(1000), Sdelay(1000), Srate(1000)
     	real*8   Xtime(1000), Xdelay(1000), xrate(1000)
 
	integer	 n_Srow(1000), n_Ssrc(1000), n_Sant(1000), n_Sref(1000)
	integer	 n_Xrow(1000), n_Xsrc(1000), n_Xant(1000), n_Xref(1000)

	character*32 SX_file_names, S_band_file, X_band_file
        character*32 SminusX_file, Xtropos_file
        character*9  c9
        equivalence (X_band_file,c9)

	write (luprint,1000)
 1000	format (30x,'Program diff_dual_freq_delays: 11/12/13!')

	luprint = 6
        luout   = 11
        luout2  = 12

c       Dimension Limits:
	max_num_data	= 1000		! max number delay/rate pairs

c       --------------------------------------------------------------------
c                    Get low C-band (will call it "S" and high C-band (will call it "X")
c                    data file names and open outputs...

c       Read "Cband_file.inp"...
	SX_file_names = 'diff_files.inp'          ! Hardwired source input file
	call input_files ( SX_file_names, S_band_file, X_band_file, 
     +                    f_low, f_high, f_tar )

        write (luprint,1100) 
 1100   format(' ** Make sure low band file is first,',
     +         ' followed by high band')

c       Make and open output file...
        write (SminusX_file,1200) c9
 1200   format(a9,'-ionos.dat')
        open (unit=luout,file=SminusX_file)
        write (luout,1201) 
 1201   format('! C-band dispersive delays (low minus high band,',
     +         ' scaled to target frequency)')

        write (Xtropos_file,1210) c9
 1210   format(a9,'-tropos.dat')
        open (unit=luout2,file=Xtropos_file)
        write (luout2,1211) 
 1211   format('! high band corrected (dispersive removed) delays')

c       --------------------------------------------------------------------
c                    Read low C-band data...

	call read_data ( S_band_file, luout, luout2,
     +                   n_Sdata,  n_Srow, n_Ssrc, n_Sant, n_Sref,
     +                   Stime, Sdelay, Srate )


        if ( n_Sdata .lt. 1 ) then
              write (luprint,2000) 
 2000         format(' No low C-band data found.')
              stop
           else
              write (luprint,2100)
 2100         format(' First 12 table entries...',/
     +        '  Band    Row  Src  Ant RefAnt UT_time   ',
     +        '  MBdelay       Rate',/
     +        '                               (days)  ',
     +        '     (sec)     (sec/sec)')
        endif

        do i = 1, 12
           write (luprint,2200) n_Srow(i),n_Ssrc(i),n_Sant(i), 
     +                    n_Sref(i),Stime(i),Sdelay(i),Srate(i)
 2200      format(' Sband:',4i5,1pd12.3,2d12.3)
        enddo

c       --------------------------------------------------------------------
c                    Read high C-band data...

	call read_data ( X_band_file, luout, luout2,
     +                   n_Xdata,  n_Xrow, n_Xsrc, n_Xant, n_Xref, 
     +                   Xtime, Xdelay, Xrate )

        if ( n_Xdata .lt. 1 ) then
              write (luprint,3000) 
 3000         format(' No high C-band data found.')
              stop
           else
              write (luprint,2100)
        endif

        do i = 1, 12
           write (luprint,3100) n_Xrow(i),n_Xsrc(i),n_Xant(i), 
     +                    n_Xref(i),Xtime(i),Xdelay(i),Xrate(i)
 3100      format(' Xband:',4i5,1pd12.3,2d12.3)
        enddo


c       --------------------------------------------------------------------
c                    pair low and high C-band data taken at same time

c       Form dispersive difference delays and tropospheric-only delays...
        n = 0

        factor  = 1/((f_high/f_low)**2 - 1)
        factor2 = 1/((f_tar/f_low)**2 - (f_tar/f_high)**2)

        do i = 1, n_Sdata

           do j = 1, n_Xdata

c             Check pairing...
              if ( n_Xsrc(j).eq.n_Ssrc(i) .and.
     +             n_Xant(j).eq.n_Sant(i) .and.
     +             n_Xref(j).eq.n_Sref(i) .and.
     +             abs(Stime(i)-Xtime(j)) .lt. 1.1574d-04 ) then

c                Have matching data at low and high C-band, difference them...
                 n = n + 1
                 delay_diff = Sdelay(i) - Xdelay(j) 
                 rate_diff  = Srate(i)  - Xrate(j) 

c                Calculate dispersive ionosphere-only delays scaled to high C-band freq 
c                delays by scaling "SminuxX" values:
c                ie, delay_diff*[(7.34GHz/4.34GHz)^2 - 1]^(-1)

                 disp_delay_Xband = delay_diff * factor
                 disp_rate_Xband  = rate_diff  * factor

c                Write out dispersive "ionosphere-only" delays scaled to 6.67 GHz 
c                ie, delay_diff*[(6.67GHz/4.34GHz)^2 - (6.67GHz/7.34GHz)^2]^(-1)
                 disp_delay_6GHz = delay_diff * factor2
                 disp_rate_6GHz  = rate_diff  * factor2

                 write (luout,4000) n, Xtime(j), n_Xsrc(j), n_Xant(j),  
     +                  disp_delay_6GHz, disp_rate_6GHz, n_Xref(j)
 4000            format(i8,1pd18.6,i12,i14,d19.3,d16.3,i11)

c                Write out high C-band tropospheric-only delays by
c                removing dispersive (ionospheric) component
                 Xdelay_trop = Xdelay(j) - disp_delay_Xband
                 Xrate_trop  = Xrate(j)  - disp_rate_Xband

                 write (luout2,4000) n, Xtime(j), n_Xsrc(j),n_Xant(j),  
     +                  Xdelay_trop, Xrate_trop, n_Xref(j)
                 
              endif

           enddo

        enddo



	stop
	end

c       ========================================================================
	subroutine input_files ( SX_file_names, S_band_file, X_band_file,
     +                            f_low, f_high, f_tar )
	implicit real*8 (a-h,o-z)

	character*32  SX_file_names, S_band_file, X_band_file

c       Get S- and X-band file names
	lu_cal          = 9
	open (lu_cal, file=SX_file_names, status='old')
	write (6, 3999) SX_file_names
 3999	format(/' "',a32,'" info...')

c       First, read in file name for low C-band geodetic-like (multi-band delay) data
	read  (lu_cal, 4020) S_band_file
 4020	format(a32)
	write (6,4020 ) S_band_file

c       Next, read in file name for high C-band geodetic-like (multi-band delay) data
	read  (lu_cal, 4020) X_band_file
	write (6,4020 ) X_band_file

c       Next, read in frequencies
	read  (lu_cal, 4030) f_low
	read  (lu_cal, 4030) f_high
	read  (lu_cal, 4030) f_tar
 4030	format(d10.5)
	write (6,4040 ) f_low, f_high, f_tar
 4040   format('Low frequency: ',d10.5,' High frequency: ',d10.5,
     +         ' Target Frequency: ',d10.5)



	close (unit=lu_cal)

	return
	end

c       ========================================================================
	subroutine read_data ( infile, luout, luout2,
     +                  n_data,  n_row, n_src, n_ant, n_ref,
     +                  time, delay, rate )


C	Read in S-band geodetic-like data for many calibrators...

	implicit real*8 (a-h,o-z)

	character*32 infile
	character*80 comment
	character*4  del_check,frate_check
	character*1  flag,blank

	real*8       time(1000), delay(1000), rate(1000)
	integer      n_row(1000), n_ant(1000), n_src(1000), n_ref(1000)
	data         max_n_geo/1000/         ! Subroutine internal dim limit


	lu_in	= 8
	blank	= ' '
        num_stations = 20       ! max station number (used to test for good data line)

c       -----------------------------------------------------------------
c                    Read in station oriented geodetic-like data

c	Open geodetic-like data file...
	write (6,1010) infile
 1010	format(/' Openning data file "',a32,'"')
	write (luout,1012) infile
	write (luout2,1012) infile
 1012   format('!'/'! Openning data file "',a32,'"')

	open (unit=lu_in, file=infile, status='old')

	read  (lu_in,1001)                     ! Skip 1st line 
 1001	format(a80)
	do i=1, 6                              ! Some comment lines
		read  (lu_in,1001) comment
		write (6,1001) comment
		write (luout,1003) comment
		write (luout2,1003) comment
 1003           format('! ',a80)
	enddo

	ieof  = 0
	n_geo = 0
        i_row      = 0
        i_row_next = 0

	do while ( ieof.ge.0 )

	   i_ant = 0             ! to enforce skipping "page-break" lines,
	   i_src = 0             ! which seem to skip the reading of these 

c          Check for a next row number
           do while ( i_row_next.ne.i_row+1 .and. ieof.ge.0 )
              read (lu_in,*,iostat=ieof) i_row_next
           enddo
           if ( ieof.ge.0 ) then

c            Check for 'INDE' values (which can read as 0's)...
             backspace (unit=lu_in)
	     read (lu_in,*) i_row,ut_days,i_src,i_ant,
     +                      del_check,frate_check

             if ( del_check.ne.'INDE' .and. frate_check.ne.'INDE' ) then 

c               Have a potentially good line of data...backspace and re-read
                backspace (unit=lu_in)
	        read (lu_in,*) i_row,ut_days,
     +                         i_src,i_ant,del_mb,frate,i_ref

c               Check for other ills before using...
	        if (  i_row.le.1000                          .and.
     +               (i_ant.ge.1 .and. i_ant.le.num_stations).and.
     +               (i_src.ge.1 .and. i_src.le.100)         .and.
     +               (i_ref.ge.1 .and. i_ref.le.20)          .and.
     +                n_geo.lt.max_n_geo )   then

 		   if ( debug .ge. 1.0 ) then
		      write (6,1002) i_row,ut_days,
     +                               i_src,i_ant,del_mb,frate,i_ref
 1002                 format(' Delay-rate info:',i4,f8.5,2i5,
     +                       1pd12.3,d12.3,i10)
		   endif

                   n_geo = n_geo + 1

                   n_row(n_geo)    = i_row   ! row number
                   n_src(n_geo)    = i_src   ! source ID number
                   n_ant(n_geo)    = i_ant   ! antenna number
                   n_ref(n_geo)    = i_ref   ! reference antenna

                   time(n_geo)     = ut_days ! UT time
                   delay(n_geo)    = del_mb  ! MBdelay (seconnds)
                   rate(n_geo)     = frate   ! fringe rate (sec/sec)
 
                endif           ! "values reasonable" check

	     endif        ! 'INDE' check

           endif      ! end of file check

	enddo

        n_data = n_geo
	write (6,2000) n_data
 2000	format(' Read in',i4,' station-oriented delay-rate pairs')

	close (unit=lu_in)

	return
	end
